Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.5.0 Build 20211109_000000

Compiler options: -O2 -O3 -qopt-report=3

    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1] foo.c(37,1)
  -> INLINE (MANUAL): (44,7) atoi(const char *)
    -> EXTERN: /usr/include/stdlib.h:(363,16) strtol(const char *__restrict__, char **__restrict__, int)
  -> EXTERN: (46,3) printf(const char *__restrict__, ...)
  -> EXTERN: (50,19) malloc(size_t)
  -> EXTERN: (51,19) malloc(size_t)
  -> EXTERN: (54,22) random(void)
  -> INLINE: (57,7) get_time_milisec()
    -> EXTERN: (14,2) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> INLINE: (58,2) foo(float *, float *, int)
    -> EXTERN: (24,12) sin(double)
  -> INLINE: (59,7) get_time_milisec()
    -> EXTERN: (14,2) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> EXTERN: (60,2) printf(const char *__restrict__, ...)
  -> INLINE: (60,43) reduction(float *, int)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at foo.c(53,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at foo.c(23,2) inlined into foo.c(58,2)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at foo.c(23,2) inlined into foo.c(58,2)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 112 
   remark #15477: vector cost: 40.000 
   remark #15478: estimated potential speedup: 2.730 
   remark #15482: vectorized math library calls: 1 
   remark #15487: type converts: 2 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at foo.c(23,2) inlined into foo.c(58,2)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at foo.c(23,2) inlined into foo.c(58,2)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at foo.c(30,2) inlined into foo.c(60,43)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at foo.c(30,2) inlined into foo.c(60,43)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 3.480 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at foo.c(30,2) inlined into foo.c(60,43)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

foo.c(37,1):remark #34051: REGISTER ALLOCATION : [main] foo.c:37

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rsi rdi r12-r15 zmm0-zmm4 zmm8-zmm10]
        
    Routine temporaries
        Total         :     167
            Global    :      52
            Local     :     115
        Regenerable   :      27
        Spilled       :       8
        
    Routine stack
        Variables     :       4 bytes*
            Reads     :       2 [3.40e-01 ~ 0.3%]
            Writes    :       2 [3.40e-01 ~ 0.3%]
        Spills        :      24 bytes*
            Reads     :       8 [1.10e+00 ~ 1.1%]
            Writes    :       8 [1.10e+00 ~ 1.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: atoi(const char *)

    Report from: Interprocedural optimizations [ipo]

NEVER EMIT DEFINITION FUNCTION: (atoi(const char *))/usr/include/stdlib.h(362,1)

===========================================================================

Begin optimization report for: get_time_milisec()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (get_time_milisec()) [3] foo.c(10,26)
  -> EXTERN: (14,2) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)


    Report from: Code generation optimizations [cg]

foo.c(10,26):remark #34051: REGISTER ALLOCATION : [get_time_milisec] foo.c:10

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rsi rdi zmm0]
        
    Routine temporaries
        Total         :      14
            Global    :       6
            Local     :       8
        Regenerable   :       3
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: foo(float *, float *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (foo(float *, float *, int)) [4] foo.c(21,44)
  -> EXTERN: (24,12) sin(double)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at foo.c(23,2)
<Peeled loop for vectorization, Multiversioned v1>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at foo.c(23,2)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 112 
   remark #15477: vector cost: 40.000 
   remark #15478: estimated potential speedup: 2.730 
   remark #15482: vectorized math library calls: 1 
   remark #15487: type converts: 2 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at foo.c(23,2)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at foo.c(23,2)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at foo.c(23,2)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
LOOP END

    Report from: Code generation optimizations [cg]

foo.c(21,44):remark #34051: REGISTER ALLOCATION : [foo] foo.c:21

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rbp rsi rdi r8-r9 r12-r15 zmm0-zmm2 zmm8-zmm10]
        
    Routine temporaries
        Total         :      94
            Global    :      33
            Local     :      61
        Regenerable   :       5
        Spilled       :       6
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [1.84e-01 ~ 0.2%]
            Writes    :       1 [1.84e-01 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: reduction(float *, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (reduction(float *, int)) [5] foo.c(28,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at foo.c(30,2)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at foo.c(30,2)
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 3.480 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at foo.c(30,2)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

foo.c(28,1):remark #34051: REGISTER ALLOCATION : [reduction] foo.c:28

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rsi rdi r8 zmm0-zmm2]
        
    Routine temporaries
        Total         :      32
            Global    :      16
            Local     :      16
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
